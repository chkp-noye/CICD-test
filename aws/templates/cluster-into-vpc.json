{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploys a Check Point Cluster into an existing VPC (__VERSION__)",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "VPC Network Configuration"
          },
          "Parameters": [
            "VPC",
            "AvailabilityZone",
            "ExternalSubnet",
            "InternalSubnet"
          ]
        },
        {
          "Label": {
            "default": "Cluster Network Configuration"
          },
          "Parameters": [
            "ClusterExternalAddr",
            "MemberAExternalAddr",
            "MemberBExternalAddr",
            "ClusterInternalAddr",
            "MemberAInternalAddr",
            "MemberBInternalAddr"
          ]
        },
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "InstanceType",
            "KeyName"
          ]
        },
        {
          "Label": {
            "default": "Check Point Settings"
          },
          "Parameters": [
            "Version",
            "Shell",
            "PasswordHash",
            "SICKey",
            "AllowUploadDownload",
            "NTPPrimary",
            "NTPSecondary"
          ]
        }
      ],
      "ParameterLabels": {
        "VPC": {
          "default": "VPC"
        },
        "AvailabilityZone": {
          "default": "Availability zone"
        },
        "ExternalSubnet": {
          "default": "External subnet"
        },
        "InternalSubnet": {
          "default": "Internal subnet"
        },
        "ClusterExternalAddr": {
          "default": "Cluster external address"
        },
        "MemberAExternalAddr": {
          "default": "Member A external address"
        },
        "MemberBExternalAddr": {
          "default": "Member B external address"
        },
        "ClusterInternalAddr": {
          "default": "Cluster internal address"
        },
        "MemberAInternalAddr": {
          "default": "Member A internal address"
        },
        "MemberBInternalAddr": {
          "default": "Member B internal address"
        },
        "InstanceType": {
          "default": "Instance type"
        },
        "KeyName": {
          "default": "Key name"
        },
        "Version": {
          "default": "Version & license"
        },
        "SICKey": {
          "default": "SIC key"
        },
        "Shell": {
          "default": "Admin shell"
        },
        "PasswordHash": {
          "default": "Password hash"
        },
        "AllowUploadDownload": {
          "default": "Allow upload & download"
        },
        "NTPPrimary": {
          "default": "Primary NTP server"
        },
        "NTPSecondary": {
          "default": "Secondary NTP server"
        }
      }
    }
  },
  "Parameters": {
    "InstanceType": {
      "Description": "c4 and t2 instance types are supported only up to version R80.10 and c5 are supported only with R80.20",
      "Type": "String",
      "AllowedValues": [
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c5.large",
        "c5.xlarge",
        "c5.2xlarge",
        "c5.4xlarge",
        "c5.9xlarge",
        "c5.18xlarge",
        "t2.xlarge",
        "t2.2xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "VPC": {
      "Type": "AWS::EC2::VPC::Id",
      "MinLength": "1"
    },
    "ExternalSubnet": {
      "Description": "The external subnet of the cluster",
      "Type": "AWS::EC2::Subnet::Id",
      "MinLength": "1"
    },
    "InternalSubnet": {
      "Description": "The internal subnet of the cluster",
      "Type": "AWS::EC2::Subnet::Id",
      "MinLength": "1"
    },
    "AvailabilityZone": {
      "Description": "The availability zone in which to deploy the cluster",
      "Type": "AWS::EC2::AvailabilityZone::Name",
      "MinLength": "1"
    },
    "ClusterExternalAddr": {
      "Description": "The private address of the cluster on the external subnet",
      "Type": "String",
      "Default": "10.0.0.10"
    },
    "MemberAExternalAddr": {
      "Description": "The private address of member A on the external subnet",
      "Type": "String",
      "Default": "10.0.0.20"
    },
    "MemberBExternalAddr": {
      "Description": "The private address of member B on the external subnet",
      "Type": "String",
      "Default": "10.0.0.30"
    },
    "ClusterInternalAddr": {
      "Description": "The private address of the cluster on the internal subnet",
      "Type": "String",
      "Default": "10.0.1.10"
    },
    "MemberAInternalAddr": {
      "Description": "The private address of member A on the internal subnet",
      "Type": "String",
      "Default": "10.0.1.20"
    },
    "MemberBInternalAddr": {
      "Description": "The private address of member B on the internal subnet",
      "Type": "String",
      "Default": "10.0.1.30"
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "Version": {
      "Type": "String",
      "AllowedValues": [
        "R77.30-BYOL",
        "R77.30-PAYG-NGTP",
        "R80.10-BYOL",
        "R80.10-PAYG-NGTP",
        "R80.10-PAYG-NGTX",
        "R80.20-BYOL",
        "R80.20-PAYG-NGTP",
        "R80.20-PAYG-NGTX"
      ]
    },
    "PasswordHash": {
      "Description": "Admin user's password hash (use command \"openssl passwd -1 PASSWORD\" to get the PASSWORD's hash) (optional)",
      "NoEcho": "true",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "[\\$\\./a-zA-Z0-9]*"
    },
    "SICKey": {
      "Description": "The Secure Internal Communication key creates trusted connections between Check Point components. Choose a random string consisting of at least 8 alphanumeric characters",
      "NoEcho": "true",
      "MinLength": "8",
      "Type": "String",
      "AllowedPattern": "[a-zA-Z0-9]*",
      "ConstraintDescription": "At least 8 alpha numeric characters"
    },
    "Shell": {
      "Description": "Change the admin shell to enable advanced command line configuration",
      "Type": "String",
      "Default": "/etc/cli.sh",
      "AllowedValues": [
        "/etc/cli.sh",
        "/bin/bash",
        "/bin/csh",
        "/bin/tcsh"
      ]
    },
    "AllowUploadDownload": {
      "Description": "Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "NTPPrimary": {
      "Description": "(optional)",
      "Type": "String",
      "Default": "169.254.169.123",
      "AllowedPattern": "[\\.a-zA-Z0-9\\-]*"
    },
    "NTPSecondary": {
      "Description": "(optional)",
      "Type": "String",
      "Default": "0.pool.ntp.org",
      "AllowedPattern": "[\\.a-zA-Z0-9\\-]*"
    }
  },
  "Conditions": {
    "ProvidedPassHash": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "PasswordHash"
            },
            ""
          ]
        }
      ]
    },
    "BlinkConfig": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Fn::Select": [
                0,
                {
                  "Fn::Split": [
                    "-",
                    {
                      "Ref": "Version"
                    }
                  ]
                }
              ]
            },
            "R77.30"
          ]
        }
      ]
    }
  },
  "Resources": {
    "ClusterReadyHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {}
    },
    "ClusterReadyCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": [
        "MemberAInstance",
        "MemberBInstance"
      ],
      "Properties": {
        "Count": "2",
        "Handle": {
          "Ref": "ClusterReadyHandle"
        },
        "Timeout": "1800"
      }
    },
    "AMI": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "__URL__/amis.json",
        "Parameters": {
          "Version": {
            "Fn::If": [
              "BlinkConfig",
              {
                "Fn::Join": [
                  "-",
                  [
                    {
                      "Ref": "Version"
                    },
                    "GW"
                  ]
                ]
              },
              {
                "Ref": "Version"
              }
            ]
          }
        }
      }
    },
    "ClusterRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "Cluster",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:DescribeRouteTables",
                    "ec2:ReplaceRoute",
                    "ec2:AssignPrivateIpAddresses",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:CreateRoute"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ClusterInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ClusterRole"
          }
        ]
      }
    },
    "InternalRoutingTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "InternalDefaultRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {
          "Ref": "MemberAInternalInterface"
        },
        "RouteTableId": {
          "Ref": "InternalRoutingTable"
        }
      }
    },
    "InternalNetworkRouteAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "InternalRoutingTable"
        },
        "SubnetId": {
          "Ref": "InternalSubnet"
        }
      }
    },
    "MemberAExternalInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "External",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": {
              "Ref": "MemberAExternalAddr"
            },
            "Primary": "true"
          },
          {
            "PrivateIpAddress": {
              "Ref": "ClusterExternalAddr"
            },
            "Primary": "false"
          }
        ],
        "SourceDestCheck": "false",
        "GroupSet": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "ExternalSubnet"
        }
      }
    },
    "MemberBExternalInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "External",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": {
              "Ref": "MemberBExternalAddr"
            },
            "Primary": "true"
          }
        ],
        "SourceDestCheck": "false",
        "GroupSet": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "ExternalSubnet"
        }
      }
    },
    "MemberAInternalInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Internal",
        "PrivateIpAddresses": [
          {
            "PrivateIpAddress": {
              "Ref": "MemberAInternalAddr"
            },
            "Primary": "true"
          },
          {
            "PrivateIpAddress": {
              "Ref": "ClusterInternalAddr"
            },
            "Primary": "false"
          }
        ],
        "GroupSet": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "InternalSubnet"
        }
      }
    },
    "MemberBInternalInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Description": "Internal",
        "PrivateIpAddress": {
          "Ref": "MemberBInternalAddr"
        },
        "GroupSet": [
          {
            "Ref": "InstanceSecurityGroup"
          }
        ],
        "SourceDestCheck": "false",
        "SubnetId": {
          "Ref": "InternalSubnet"
        }
      }
    },
    "InstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Permissive security group",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "MemberAInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Member A"
          }
        ],
        "ImageId": {
          "Fn::GetAtt": [
            "AMI",
            "Outputs.ImageId"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Ref": "MemberAExternalInterface"
            }
          },
          {
            "DeviceIndex": "1",
            "NetworkInterfaceId": {
              "Ref": "MemberAInternalInterface"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "ClusterInstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "echo template_name: cluster >> /etc/cloud-version",
                "echo template_version: __VERSION__ >> /etc/cloud-version",
                {
                  "Fn::Join": [
                    "",
                    [
                      "wait_handle='",
                      {
                        "Ref": "ClusterReadyHandle"
                      },
                      "'"
                    ]
                  ]
                },
                "instance_id=\"$(curl_cli -s -S 169.254.169.254/latest/meta-data/instance-id)\"",
                {
                  "Fn::If": [
                    "ProvidedPassHash",
                    {
                      "Fn::Join": [
                        "\n",
                        [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "pwd_hash='",
                                {
                                  "Ref": "PasswordHash"
                                },
                                "'"
                              ]
                            ]
                          },
                          "echo \"set admin password\"",
                          "clish -c \"set user admin password-hash $pwd_hash\" -s"
                        ]
                      ]
                    },
                    "pwd_hash=\"$(dd if=/dev/urandom count=1 2>/dev/null | sha1sum | cut -c -28)\""
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "ntp1='",
                      {
                        "Ref": "NTPPrimary"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "ntp2='",
                      {
                        "Ref": "NTPSecondary"
                      },
                      "'"
                    ]
                  ]
                },
                "test -z \"$ntp1\" || {",
                "   echo \"set primary NTP server\"",
                "   clish -c \"set ntp server primary $ntp1 version 4\" -s",
                "   test -z \"$ntp2\" || {",
                "       echo \"set secondary NTP server\"",
                "       clish -c \"set ntp server secondary $ntp2 version 4\" -s",
                "   }",
                "   clish -c \"set ntp active on\" -s",
                "}",
                "printf H4sIAEQeOVoCAzNoYuE3aGL6voCZiZGJiZHBgJeNU6vNo+07LyMjKyuDQYYhtwEnG3MoC5swU2iwoaqBMojDJSwTXJJYlJaZmpOiEJKanJGXn5OfnplarKPgmZesZ2hkYABSxi2siVDmnJNYXKxgpOCcWlSSmZaZnFiSmZ+n4FhakpFflFlSaSAnzmtgYmBmZGlobmxpaBYlzmuMzKWjS5oYFZCDgZGVgbmJkZcBKM7B1MTIyLDd6MS/l4XLWFrX8gim3D/n+/4Es0S7/cLVv22Wzf9weOGtKzfytIMn/FZZYtfyYd6L+DdP1V2+aiyzr773QOvDifXB+vNOsTJOlutPk7Fc7vsralsxi2ra6/L655HHvGaqioS8Vjv+uV7yqkFB//oNblr/177WfHt9/iqW9sVXfnYuNYm/7Tyxyexmms3GHTub/s6xshM4Yf2eLTWtarakhO3/wkAbA734fbblxZti2XIOK4fN0m5VmySznGnzE3ve9RyVTTvMbF/NuWy6eU/mqa9n5r74m9Ir3mCcF+cVO/OkXPuWuVIHruYJmyrH3Z8db/v+2veyQ6/sdlfwyjilZ7Pc+HHtVn73J5cFjKuZGJkXNx41aDxkIAsMW1k+FjEWkf3x2y+euyvf9iU6dM2d6wKH+FZ2PDdonASSV2Zp7DJobG/AqmZhzpIs+kVtEzCB84DcJMzCasDMyPgfLbkzg6KXda59x9yLJ6VCF67J/Pw58tZsxnYp//CVCys5tW5/198kd+Z4XNaN5vaF0997mtqVszlGJO3vi9jBlW7/ZvNdxTT5kyG/is7Y+jjcaFxfPq+5avei419NxPtuCjp8+aOj5StavzwpVk/1MgO3gpRsxk/xHV/2dr/ViLzrK9Yt3nxiU+px3aqlq/YEt+XeDV9y6oeCI3fGhy+/S/aFxVZVfv0p2/pYd+q+r4UTnM/0ys9i4GrXfBmqFMGg/OqxkLNmtDvH3R7HrFS2FU8VVzlumao4dWftRZPVwtfW7rnzyNby7F670oKFEpHMJ5W29M+5Gqd1fem2K1y5P7Y7CLrNkq/kS9rPP/3NA3158SkAHEuNARMEAAA= | base64 -d | gunzip -c | cpopenssl x509 -inform DER >$CPDIR/tmp/wait-handle.crt",
                "cat $CPDIR/conf/ca-bundle.crt >>$CPDIR/tmp/wait-handle.crt",
                {
                  "Fn::Sub": "clish -c \"set user admin shell ${Shell}\" -s"
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "sic=$(echo '",
                      {
                        "Fn::Base64": {
                          "Ref": "SICKey"
                        }
                      },
                      "' | base64 --decode)"
                    ]
                  ]
                },
                {
                  "Fn::If": [
                    "BlinkConfig",
                    {
                      "Fn::Sub": "blink_config -s \"gateway_cluster_member=true&ftw_sic_key='$sic'&upload_info=${AllowUploadDownload}&download_info=${AllowUploadDownload}&admin_hash='$pwd_hash'\""
                    },
                    {
                      "Fn::Sub": "config_system -s \"install_security_gw=true&install_ppak=true&gateway_cluster_member=true&install_security_managment=false&ftw_sic_key='$sic'&upload_info=${AllowUploadDownload}&download_info=${AllowUploadDownload}\""
                    }
                  ]
                },
                "rc=$?",
                "if test -n \"$wait_handle\"; then",
                "    if test $rc -ne 0; then",
                "        curl_cli -s -S --cacert $CPDIR/tmp/wait-handle.crt -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"FAILURE\", \"Reason\" : \"Security Gateway configuration failed\", \"UniqueId\" : \"'$instance_id'\", \"Data\" : \"None\"}' \"$wait_handle\"",
                "    else",
                "        curl_cli -s -S --cacert $CPDIR/tmp/wait-handle.crt -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"SUCCESS\", \"Reason\" : \"Security Gateway configuration complete\", \"UniqueId\" : \"'$instance_id'\", \"Data\" : \"Configuration completed.\"}' \"$wait_handle\"",
                "    fi",
                "fi",
                "shutdown -r now",
                ""
              ]
            ]
          }
        }
      }
    },
    "MemberBInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "AvailabilityZone": {
          "Ref": "AvailabilityZone"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Member B"
          }
        ],
        "ImageId": {
          "Fn::GetAtt": [
            "AMI",
            "Outputs.ImageId"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Ref": "MemberBExternalInterface"
            }
          },
          {
            "DeviceIndex": "1",
            "NetworkInterfaceId": {
              "Ref": "MemberBInternalInterface"
            }
          }
        ],
        "IamInstanceProfile": {
          "Ref": "ClusterInstanceProfile"
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "echo template_name: cluster >> /etc/cloud-version",
                "echo template_version: __VERSION__ >> /etc/cloud-version",
                {
                  "Fn::Join": [
                    "",
                    [
                      "wait_handle='",
                      {
                        "Ref": "ClusterReadyHandle"
                      },
                      "'"
                    ]
                  ]
                },
                "instance_id=\"$(curl_cli -s -S 169.254.169.254/latest/meta-data/instance-id)\"",
                {
                  "Fn::If": [
                    "ProvidedPassHash",
                    {
                      "Fn::Join": [
                        "\n",
                        [
                          {
                            "Fn::Join": [
                              "",
                              [
                                "pwd_hash='",
                                {
                                  "Ref": "PasswordHash"
                                },
                                "'"
                              ]
                            ]
                          },
                          "echo \"set admin password\"",
                          "clish -c \"set user admin password-hash $pwd_hash\" -s"
                        ]
                      ]
                    },
                    "pwd_hash=\"$(dd if=/dev/urandom count=1 2>/dev/null | sha1sum | cut -c -28)\""
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "ntp1='",
                      {
                        "Ref": "NTPPrimary"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "ntp2='",
                      {
                        "Ref": "NTPSecondary"
                      },
                      "'"
                    ]
                  ]
                },
                "test -z \"$ntp1\" || {",
                "   echo \"set primary NTP server\"",
                "   clish -c \"set ntp server primary $ntp1 version 4\" -s",
                "   test -z \"$ntp2\" || {",
                "       echo \"set secondary NTP server\"",
                "       clish -c \"set ntp server secondary $ntp2 version 4\" -s",
                "   }",
                "   clish -c \"set ntp active on\" -s",
                "}",
                "printf H4sIAEQeOVoCAzNoYuE3aGL6voCZiZGJiZHBgJeNU6vNo+07LyMjKyuDQYYhtwEnG3MoC5swU2iwoaqBMojDJSwTXJJYlJaZmpOiEJKanJGXn5OfnplarKPgmZesZ2hkYABSxi2siVDmnJNYXKxgpOCcWlSSmZaZnFiSmZ+n4FhakpFflFlSaSAnzmtgYmBmZGlobmxpaBYlzmuMzKWjS5oYFZCDgZGVgbmJkZcBKM7B1MTIyLDd6MS/l4XLWFrX8gim3D/n+/4Es0S7/cLVv22Wzf9weOGtKzfytIMn/FZZYtfyYd6L+DdP1V2+aiyzr773QOvDifXB+vNOsTJOlutPk7Fc7vsralsxi2ra6/L655HHvGaqioS8Vjv+uV7yqkFB//oNblr/177WfHt9/iqW9sVXfnYuNYm/7Tyxyexmms3GHTub/s6xshM4Yf2eLTWtarakhO3/wkAbA734fbblxZti2XIOK4fN0m5VmySznGnzE3ve9RyVTTvMbF/NuWy6eU/mqa9n5r74m9Ir3mCcF+cVO/OkXPuWuVIHruYJmyrH3Z8db/v+2veyQ6/sdlfwyjilZ7Pc+HHtVn73J5cFjKuZGJkXNx41aDxkIAsMW1k+FjEWkf3x2y+euyvf9iU6dM2d6wKH+FZ2PDdonASSV2Zp7DJobG/AqmZhzpIs+kVtEzCB84DcJMzCasDMyPgfLbkzg6KXda59x9yLJ6VCF67J/Pw58tZsxnYp//CVCys5tW5/198kd+Z4XNaN5vaF0997mtqVszlGJO3vi9jBlW7/ZvNdxTT5kyG/is7Y+jjcaFxfPq+5avei419NxPtuCjp8+aOj5StavzwpVk/1MgO3gpRsxk/xHV/2dr/ViLzrK9Yt3nxiU+px3aqlq/YEt+XeDV9y6oeCI3fGhy+/S/aFxVZVfv0p2/pYd+q+r4UTnM/0ys9i4GrXfBmqFMGg/OqxkLNmtDvH3R7HrFS2FU8VVzlumao4dWftRZPVwtfW7rnzyNby7F670oKFEpHMJ5W29M+5Gqd1fem2K1y5P7Y7CLrNkq/kS9rPP/3NA3158SkAHEuNARMEAAA= | base64 -d | gunzip -c | cpopenssl x509 -inform DER >$CPDIR/tmp/wait-handle.crt",
                "cat $CPDIR/conf/ca-bundle.crt >>$CPDIR/tmp/wait-handle.crt",
                {
                  "Fn::Sub": "clish -c \"set user admin shell ${Shell}\" -s"
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "sic=$(echo '",
                      {
                        "Fn::Base64": {
                          "Ref": "SICKey"
                        }
                      },
                      "' | base64 --decode)"
                    ]
                  ]
                },
                {
                  "Fn::If": [
                    "BlinkConfig",
                    {
                      "Fn::Sub": "blink_config -s \"gateway_cluster_member=true&ftw_sic_key='$sic'&upload_info=${AllowUploadDownload}&download_info=${AllowUploadDownload}&admin_hash='$pwd_hash'\""
                    },
                    {
                      "Fn::Sub": "config_system -s \"install_security_gw=true&install_ppak=true&gateway_cluster_member=true&install_security_managment=false&ftw_sic_key='$sic'&upload_info=${AllowUploadDownload}&download_info=${AllowUploadDownload}\""
                    }
                  ]
                },
                "rc=$?",
                "if test -n \"$wait_handle\"; then",
                "    if test $rc -ne 0; then",
                "        curl_cli -s -S --cacert $CPDIR/tmp/wait-handle.crt -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"FAILURE\", \"Reason\" : \"Security Gateway configuration failed\", \"UniqueId\" : \"'$instance_id'\", \"Data\" : \"None\"}' \"$wait_handle\"",
                "    else",
                "        curl_cli -s -S --cacert $CPDIR/tmp/wait-handle.crt -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"SUCCESS\", \"Reason\" : \"Security Gateway configuration complete\", \"UniqueId\" : \"'$instance_id'\", \"Data\" : \"Configuration completed.\"}' \"$wait_handle\"",
                "    fi",
                "fi",
                "shutdown -r now",
                ""
              ]
            ]
          }
        }
      }
    },
    "ClusterPublicAddress": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "MemberAPublicAddress": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "MemberBPublicAddress": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "ClusterAddressAssoc": {
      "Type": "AWS::EC2::EIPAssociation",
      "DependsOn" : "MemberAInstance",
      "Properties": {
        "NetworkInterfaceId": {
          "Ref": "MemberAExternalInterface"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "ClusterPublicAddress",
            "AllocationId"
          ]
        },
        "PrivateIpAddress": {
          "Ref": "ClusterExternalAddr"
        }
      }
    },
    "MemberAAddressAssoc": {
      "Type": "AWS::EC2::EIPAssociation",
      "DependsOn" : "MemberAInstance",
      "Properties": {
        "NetworkInterfaceId": {
          "Ref": "MemberAExternalInterface"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "MemberAPublicAddress",
            "AllocationId"
          ]
        },
        "PrivateIpAddress": {
          "Fn::GetAtt": [
            "MemberAExternalInterface",
            "PrimaryPrivateIpAddress"
          ]
        }
      }
    },
    "MemberBAddressAssoc": {
      "Type": "AWS::EC2::EIPAssociation",
      "DependsOn" : "MemberBInstance",
      "Properties": {
        "NetworkInterfaceId": {
          "Ref": "MemberBExternalInterface"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "MemberBPublicAddress",
            "AllocationId"
          ]
        },
        "PrivateIpAddress": {
          "Fn::GetAtt": [
            "MemberBExternalInterface",
            "PrimaryPrivateIpAddress"
          ]
        }
      }
    }
  },
  "Outputs": {
    "ClusterPublicAddress": {
      "Description": "The public address of the cluster",
      "Value": {
        "Ref": "ClusterPublicAddress"
      }
    },
    "MemberAPublicAddress": {
      "Description": "The public address of member A",
      "Value": {
        "Ref": "MemberAPublicAddress"
      }
    },
    "MemberASSH": {
      "Description": "SSH command to member A",
      "Value": {
        "Fn::Join": [
          "",
          [
            "ssh admin@",
            {
              "Ref": "MemberAPublicAddress"
            }
          ]
        ]
      }
    },
    "MemberAURL": {
      "Description": "URL to the member A portal",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "MemberAPublicAddress"
            }
          ]
        ]
      }
    },
    "MemberBPublicAddress": {
      "Description": "The public address of member B",
      "Value": {
        "Ref": "MemberBPublicAddress"
      }
    },
    "MemberBSSH": {
      "Description": "SSH command to member B",
      "Value": {
        "Fn::Join": [
          "",
          [
            "ssh admin@",
            {
              "Ref": "MemberBPublicAddress"
            }
          ]
        ]
      }
    },
    "MemberBURL": {
      "Description": "URL to the member B portal",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "MemberBPublicAddress"
            }
          ]
        ]
      }
    }
  }
}
