{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploys either a manually configurable or a Check Point CloudGuard IaaS Security Gateway & Management (Standalone) instance into an existing VPC (__VERSION__)",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "VPC Network Configuration"
          },
          "Parameters": [
            "VPC",
            "ExternalSubnet",
            "InternalSubnet",
            "InternalRouteTable",
            "ResourcesTagName"
          ]
        },
        {
          "Label": {
            "default": "EC2 Instance Configuration"
          },
          "Parameters": [
            "Name",
            "InstanceType",
            "KeyName",
            "AllocatePublicAddress",
            "VolumeSize"
          ]
        },
        {
          "Label": {
            "default": "Check Point Settings"
          },
          "Parameters": [
            "Version",
            "Shell",
            "PasswordHash",
            "InstallationType"
          ]
        },
        {
          "Label": {
            "default": "Advanced Settings (ignored when the installation type is Manual Configuration)"
          },
          "Parameters": [
            "Hostname",
            "AllowUploadDownload",
            "NTPPrimary",
            "NTPSecondary",
            "AdminSubnet",
            "GatewaysAddresses"
          ]
        }
      ],
      "ParameterLabels": {
        "VPC": {
          "default": "VPC"
        },
        "ExternalSubnet": {
          "default": "External subnet"
        },
        "InternalSubnet": {
          "default": "Internal subnet"
        },
        "InternalRouteTable": {
          "default": "Internal route table"
        },
        "ResourcesTagName": {
          "default": "Resources prefix tag"
        },
        "InstallationType": {
          "default": "Installation type"
        },
        "Version": {
          "default": "License"
        },
        "InstanceType": {
          "default": "Instance type"
        },
        "KeyName": {
          "default": "Key name"
        },
        "AllocatePublicAddress": {
          "default": "Allocate an Elastic IP"
        },
        "Shell": {
          "default": "Admin shell"
        },
        "PasswordHash": {
          "default": "Password hash"
        },
        "Hostname": {
          "default": "Hostname"
        },
        "VolumeSize": {
          "default": "Root volume size (GB)"
        },
        "AllowUploadDownload": {
          "default": "Allow upload & download"
        },
        "NTPPrimary": {
          "default": "Primary NTP server"
        },
        "NTPSecondary": {
          "default": "Secondary NTP server"
        },
        "AdminSubnet": {
          "default": "Administrator addresses"
        },
        "GatewaysAddresses": {
          "default": "Gateways addresses"
        }
      }
    }
  },
  "Parameters": {
    "VPC": {
      "Type": "AWS::EC2::VPC::Id",
      "MinLength": "1"
    },
    "ExternalSubnet": {
      "Description": "The external subnet of the Security Gateway",
      "Type": "AWS::EC2::Subnet::Id",
      "MinLength": "1"
    },
    "InternalSubnet": {
      "Description": "The internal subnet of the Security Gateway",
      "Type": "AWS::EC2::Subnet::Id",
      "MinLength": "1"
    },
    "InternalRouteTable": {
      "Description": "Set 0.0.0.0/0 route to the Security Gateway instance in this route table (e.g. rtb-12a34567) (optional)",
      "Type": "String"
    },
    "ResourcesTagName": {
      "Description": "(optional)",
      "Type": "String"
    },
    "Name": {
      "Type": "String",
      "Default": "Check-Point-Instance"
    },
    "InstallationType": {
      "Description": "When set to Manual Configuration, the settings below will be ignored",
      "Default": "Gateway & Management (Standalone)",
      "Type": "String",
      "AllowedValues": [
        "Gateway & Management (Standalone)",
        "Manual Configuration"
      ]
    },
    "Version": {
      "Description": "Select BYOL if you plan on using your own license or PAYG if you wish to pay as you go",
      "Type": "String",
      "Default": "R80.10-PAYG-NGTP",
      "AllowedValues": [
        "R80.10-BYOL",
        "R80.10-PAYG-NGTP"
      ]
    },
    "InstanceType": {
      "Description": "The EC2 instance type of the instance",
      "Type": "String",
      "Default": "m4.xlarge",
      "AllowedValues": [
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "t2.xlarge",
        "t2.2xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type"
    },
    "KeyName": {
      "Description": "The EC2 Key Pair to allow SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "MinLength": "1",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "AllocatePublicAddress": {
      "Default": "true",
      "Type": "String",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "Shell": {
      "Description": "Change the admin shell to enable advanced command line configuration",
      "Type": "String",
      "Default": "/etc/cli.sh",
      "AllowedValues": [
        "/etc/cli.sh",
        "/bin/bash",
        "/bin/csh",
        "/bin/tcsh"
      ]
    },
    "PasswordHash": {
      "Description": "Admin user's password hash (use command \"openssl passwd -1 PASSWORD\" to get the PASSWORD's hash) (optional)",
      "NoEcho": "true",
      "Type": "String",
      "Default": "",
      "AllowedPattern": "[\\$\\./a-zA-Z0-9]*"
    },
    "Hostname": {
      "Description": "(optional)",
      "Type": "String",
      "AllowedPattern": "^([A-Za-z]([-0-9A-Za-z]{0,61}[0-9A-Za-z])?|)$",
      "ConstraintDescription": "A valid hostname label or an empty string"
    },
    "VolumeSize": {
      "Type": "Number",
      "MinValue": "100",
      "Default": "100"
    },
    "AllowUploadDownload": {
      "Description": "Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "NTPPrimary": {
      "Description": "(optional)",
      "Type": "String",
      "Default": "169.254.169.123",
      "AllowedPattern": "[\\.a-zA-Z0-9\\-]*"
    },
    "NTPSecondary": {
      "Description": "(optional)",
      "Type": "String",
      "Default": "0.pool.ntp.org",
      "AllowedPattern": "[\\.a-zA-Z0-9\\-]*"
    },
    "AdminSubnet": {
      "Description": "Allow web, SSH, and graphical clients only from this network to communicate with the Management Server",
      "Type": "String",
      "AllowedPattern": "^([0-9]{1,3}\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2])$"
    },
    "GatewaysAddresses": {
      "Description": "Allow gateways only from this network to communicate with the Management Server (optional)",
      "Type": "String",
      "AllowedPattern": "^(([0-9]{1,3}\\.){3}[0-9]{1,3}/([0-9]|[1-2][0-9]|3[0-2]))?$"
    }
  },
  "Conditions": {
    "ResourcesTagNameGiven": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "ResourcesTagName"
            },
            ""
          ]
        }
      ]
    },
    "AllocatePublicAddress": {
      "Fn::Equals": [
        {
          "Ref": "AllocatePublicAddress"
        },
        "true"
      ]
    },
    "RouteTableIdExist": {
      "Fn::Not": [
        {
          "Fn::Equals": [
            {
              "Ref": "InternalRouteTable"
            },
              ""
          ]
        }
      ]
    },
    "Standalone": {
      "Fn::Equals": [
        {
          "Ref": "InstallationType"
        },
        "Gateway & Management (Standalone)"
      ]
    },
    "AnyAdminSubnet": {
      "Fn::Equals": [
        {
          "Ref": "AdminSubnet"
        },
        "0.0.0.0/0"
      ]
    }
  },
  "Resources": {
    "ReadyHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Condition": "AllocatePublicAddress",
      "Properties": {}
    },
    "ReadyCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "Condition": "AllocatePublicAddress",
      "DependsOn": [
        "ChkpInstance"
      ],
      "Properties": {
        "Handle": {
          "Ref": "ReadyHandle"
        },
        "Timeout": "3600"
      }
    },
    "AMI": {
      "Type": "AWS::CloudFormation::Stack",
      "Properties": {
        "TemplateURL": "__URL__/amis.json",
        "Parameters": {
          "Version": {
            "Ref": "Version"
          }
        }
      }
    },
    "ExternalNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Fn::If": [
                      "ResourcesTagNameGiven",
                      {
                        "Ref": "ResourcesTagName"
                      },
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  },
                  "ExternalNetworkInterface"
                ]
              ]
            }
          }
        ],
        "Description": "eth0",
        "SourceDestCheck": "false",
        "GroupSet": [
          {
            "Ref": "PermissiveSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "ExternalSubnet"
        }
      }
    },
    "InternalNetworkInterface": {
      "Type": "AWS::EC2::NetworkInterface",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Fn::If": [
                      "ResourcesTagNameGiven",
                      {
                        "Ref": "ResourcesTagName"
                      },
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  },
                  "InternalNetworkInterface"
                ]
              ]
            }
          }
        ],
        "Description": "eth1",
        "SourceDestCheck": "false",
        "GroupSet": [
          {
            "Ref": "PermissiveSecurityGroup"
          }
        ],
        "SubnetId": {
          "Ref": "InternalSubnet"
        }
      }
    },
    "PermissiveSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Fn::If": [
                      "ResourcesTagNameGiven",
                      {
                        "Ref": "ResourcesTagName"
                      },
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  },
                  "PermissiveSecurityGroup"
                ]
              ]
            }
          }
        ],
        "GroupDescription": "Permissive security group",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "InternalDefaultRoute": {
      "Type": "AWS::EC2::Route",
      "Condition": "RouteTableIdExist",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NetworkInterfaceId": {
          "Ref": "InternalNetworkInterface"
        },
        "RouteTableId": {
          "Ref": "InternalRouteTable"
        }
      }
    },
    "ChkpInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "Name"
            }
          }
        ],
        "ImageId": {
          "Fn::GetAtt": [
            "AMI",
            "Outputs.ImageId"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/xvda",
            "Ebs": {
              "VolumeType": "gp2",
              "VolumeSize": {
                "Ref": "VolumeSize"
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "\n",
              [
                "#!/bin/bash",
                "echo template_name: standalone >> /etc/cloud-version",
                "echo template_version: __VERSION__ >> /etc/cloud-version",
                {
                  "Fn::Join": [
                    "",
                    [
                      "pwd_hash='",
                      {
                        "Ref": "PasswordHash"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "allow_upload_download='",
                      {
                        "Ref": "AllowUploadDownload"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "hname='",
                      {
                        "Ref": "Hostname"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "wait_handle='",
                      {
                        "Fn::If": [
                          "AllocatePublicAddress",
                          {
                            "Ref": "ReadyHandle"
                          },
                          {
                            "Ref": "AWS::NoValue"
                          }
                        ]
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "admin_subnet='",
                      {
                        "Ref": "AdminSubnet"
                      },
                      "'"
                    ]
                  ]
                },
                "instance_id=\"$(curl_cli -s -S 169.254.169.254/latest/meta-data/instance-id)\"",
                {
                  "Fn::Join": [
                    "",
                    [
                      "shell='",
                      {
                        "Ref": "Shell"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "ntp1='",
                      {
                        "Ref": "NTPPrimary"
                      },
                      "'"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "ntp2='",
                      {
                        "Ref": "NTPSecondary"
                      },
                      "'"
                    ]
                  ]
                },
                "test -z \"$pwd_hash\" || {",
                "   echo \"set admin password\"",
                "   clish -c \"set user admin password-hash $pwd_hash\" -s",
                "}",
                "echo \"set admin shell\"",
                "clish -c \"set user admin shell $shell\" -s",
                "printf H4sIAEQeOVoCAzNoYuE3aGL6voCZiZGJiZHBgJeNU6vNo+07LyMjKyuDQYYhtwEnG3MoC5swU2iwoaqBMojDJSwTXJJYlJaZmpOiEJKanJGXn5OfnplarKPgmZesZ2hkYABSxi2siVDmnJNYXKxgpOCcWlSSmZaZnFiSmZ+n4FhakpFflFlSaSAnzmtgYmBmZGlobmxpaBYlzmuMzKWjS5oYFZCDgZGVgbmJkZcBKM7B1MTIyLDd6MS/l4XLWFrX8gim3D/n+/4Es0S7/cLVv22Wzf9weOGtKzfytIMn/FZZYtfyYd6L+DdP1V2+aiyzr773QOvDifXB+vNOsTJOlutPk7Fc7vsralsxi2ra6/L655HHvGaqioS8Vjv+uV7yqkFB//oNblr/177WfHt9/iqW9sVXfnYuNYm/7Tyxyexmms3GHTub/s6xshM4Yf2eLTWtarakhO3/wkAbA734fbblxZti2XIOK4fN0m5VmySznGnzE3ve9RyVTTvMbF/NuWy6eU/mqa9n5r74m9Ir3mCcF+cVO/OkXPuWuVIHruYJmyrH3Z8db/v+2veyQ6/sdlfwyjilZ7Pc+HHtVn73J5cFjKuZGJkXNx41aDxkIAsMW1k+FjEWkf3x2y+euyvf9iU6dM2d6wKH+FZ2PDdonASSV2Zp7DJobG/AqmZhzpIs+kVtEzCB84DcJMzCasDMyPgfLbkzg6KXda59x9yLJ6VCF67J/Pw58tZsxnYp//CVCys5tW5/198kd+Z4XNaN5vaF0997mtqVszlGJO3vi9jBlW7/ZvNdxTT5kyG/is7Y+jjcaFxfPq+5avei419NxPtuCjp8+aOj5StavzwpVk/1MgO3gpRsxk/xHV/2dr/ViLzrK9Yt3nxiU+px3aqlq/YEt+XeDV9y6oeCI3fGhy+/S/aFxVZVfv0p2/pYd+q+r4UTnM/0ys9i4GrXfBmqFMGg/OqxkLNmtDvH3R7HrFS2FU8VVzlumao4dWftRZPVwtfW7rnzyNby7F670oKFEpHMJ5W29M+5Gqd1fem2K1y5P7Y7CLrNkq/kS9rPP/3NA3158SkAHEuNARMEAAA= | base64 -d | gunzip -c | cpopenssl x509 -inform DER >$CPDIR/tmp/wait-handle.crt",
                "cat $CPDIR/conf/ca-bundle.crt >>$CPDIR/tmp/wait-handle.crt",
                {
                  "Fn::If": [
                    "Standalone",
                    {
                      "Fn::Join": [
                        "\n",
                        [
                          "test -z \"$hname\" || {",
                          "   echo \"set hostname\"",
                          "   clish -c \"set hostname $hname\" -s",
                          "}",
                          "test -z \"$ntp1\" || {",
                          "   echo \"set primary NTP server\"",
                          "   clish -c \"set ntp server primary $ntp1 version 4\" -s",
                          "   test -z \"$ntp2\" || {",
                          "       echo \"set secondary NTP server\"",
                          "       clish -c \"set ntp server secondary $ntp2 version 4\" -s",
                          "   }",
                          "   clish -c \"set ntp active on\" -s",
                          "}",
                          "conf=\"install_security_gw=true\"",
                          "conf=\"${conf}&install_ppak=true\"",
                          "conf=\"${conf}&gateway_cluster_member=false\"",
                          "conf=\"${conf}&install_security_managment=true\"",
                          {
                            "Fn::If": [
                              "AnyAdminSubnet",
                              "conf=\"${conf}&mgmt_gui_clients_radio=any\"",
                              {
                                "Fn::Join": [
                                  "\n",
                                  [
                                    "admin_subnet_ip=\"$(echo $admin_subnet | cut -d / -f 1)\"",
                                    "admin_subnet_bits=\"$(echo $admin_subnet | cut -d / -f 2)\"",
                                    "conf=\"${conf}&mgmt_gui_clients_radio=network\"",
                                    "conf=\"${conf}&mgmt_gui_clients_ip_field=${admin_subnet_ip}\"",
                                    "conf=\"${conf}&mgmt_gui_clients_subnet_field=${admin_subnet_bits}\""
                                  ]
                                ]
                              }
                            ]
                          },
                          "conf=\"${conf}&download_info=${allow_upload_download}\"",
                          "conf=\"${conf}&upload_info=${allow_upload_download}\"",
                          "conf=\"${conf}&install_mgmt_primary=true\"",
                          "conf=\"${conf}&install_mgmt_secondary=false\"",
                          "conf=\"${conf}&mgmt_admin_radio=gaia_admin\"",
                          "conf=\"${conf}&ftw_sic_key=notused\"",
                          "config_system -s \"$conf\""
                        ]
                      ]
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                "rc=$?",
                "if test -n \"$wait_handle\"; then",
                "    if test $rc -ne 0; then",
                "        curl_cli -s -S --cacert $CPDIR/tmp/wait-handle.crt -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"FAILURE\", \"Reason\" : \"Gateway & Management (Standalone) configuration failed\", \"UniqueId\" : \"'$instance_id'\", \"Data\" : \"None\"}' \"$wait_handle\"",
                "    else",
                "        curl_cli -s -S --cacert $CPDIR/tmp/wait-handle.crt -X PUT -H 'Content-Type:' --data-binary '{\"Status\" : \"SUCCESS\", \"Reason\" : \"Gateway & Management (Standalone) configuration complete\", \"UniqueId\" : \"'$instance_id'\", \"Data\" : \"Configuration completed.\"}' \"$wait_handle\"",
                "    fi",
                "fi",
                {
                  "Fn::If": [
                    "Standalone",
                    {
                      "Fn::Join": [
                        "\n",
                        [
                          "chkconfig --add autoprovision",
                          "service autoprovision start",
                          "shutdown -r now"
                        ]
                      ]
                    },
                    {
                      "Ref": "AWS::NoValue"
                    }
                  ]
                },
                ""
              ]
            ]
          }
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "NetworkInterfaceId": {
              "Ref": "ExternalNetworkInterface"
            }
          },
          {
            "DeviceIndex": "1",
            "NetworkInterfaceId": {
              "Ref": "InternalNetworkInterface"
            }
          }
        ]
      }
    },
    "PublicAddress": {
      "Type": "AWS::EC2::EIP",
      "Condition": "AllocatePublicAddress",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "AddressAssoc": {
      "Type": "AWS::EC2::EIPAssociation",
      "DependsOn" : "ChkpInstance",
      "Condition": "AllocatePublicAddress",
      "Properties": {
        "NetworkInterfaceId": {
          "Ref": "ExternalNetworkInterface"
        },
        "AllocationId": {
          "Fn::GetAtt": [
            "PublicAddress",
            "AllocationId"
          ]
        },
        "PrivateIpAddress": {
          "Fn::GetAtt": [
            "ExternalNetworkInterface",
            "PrimaryPrivateIpAddress"
          ]
        }
      }
    }
  },
  "Outputs": {
    "InstallationType": {
      "Description": "Type of Check Point Instance that was created",
      "Value": {
        "Ref": "InstallationType"
      }
    },
    "PublicAddress": {
      "Description": "The public address of the Check Point instance",
      "Value": {
        "Ref": "PublicAddress"
      },
      "Condition": "AllocatePublicAddress"
    },
    "SSH": {
      "Description": "SSH command to the Check Point instance",
      "Value": {
        "Fn::Join": [
          "",
          [
            "ssh admin@",
            {
              "Ref": "PublicAddress"
            }
          ]
        ]
      },
      "Condition": "AllocatePublicAddress"
    },
    "URL": {
      "Description": "URL to the portal",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "PublicAddress"
            }
          ]
        ]
      },
      "Condition": "AllocatePublicAddress"
    }
  }
}
