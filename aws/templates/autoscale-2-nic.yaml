AWSTemplateFormatVersion: '2010-09-09'
Description: test Create an Auto Scaling group of Check Point gateways. The gateways provide outbound network connectivity through an internal ELB for instances inside a VPC.  The gateways are automatically provisioned as explained in https://bitbucket.org/chkp/sddc/src
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network Configuration
      Parameters:
      - VPC
      - ExternalSubnets
      - InternalSubnets
    - Label:
        default: Check Point Management Settings
      Parameters:
      - ControlGatewayOverPrivateOrPublicAddress
      - ManagementServer
      - ConfigruationTemplate
    - Label:
        default: Auto Scaling Configuration
      Parameters:
      - MinSize
      - MaxSize
      - AdminEmail
    - Label:
        default: Gateways Settings
      Parameters:
      - Name
      - InstanceType
      - SecurityGroups
      - KeyName
      - SICKey
      - License
      - Shell
      - PasswordHash
      - EnableCloudWatch
    - Label:
        default: Proxy Configuration (optional)
      Parameters:
      - ELBType
      - ELBPort
      - ELBClients
    ParameterLabels:
      VPC:
        default: VPC
      ExternalSubnets:
        default: External Subnets
      InternalSubnets:
        default: Internal Subnets
      ELBType:
        default: Proxy Type
      ELBPort:
        default: Proxy Port
      ELBClients:
        default: Proxy Clients
      AdminEmail:
        default: Email Address
      MinSize:
        default: Minimum Group Size
      MaxSize:
        default: Maximum Group Size
      ControlGatewayOverPrivateOrPublicAddress:
        default: Gateways Addresses
      ManagementServer:
        default: Management Server
      ConfigruationTemplate:
        default: Configuration Template
      Name:
        default: Name
      SecurityGroups:
        default: Security Groups
      InstanceType:
        default: Instance Type
      KeyName:
        default: Key Name
      SICKey:
        default: SIC Key
      License:
        default: License Type
      Shell:
        default: Admin Shell
      PasswordHash:
        default: Password Hash
      EnableCloudWatch:
        default: CloudWatch Metrics
Parameters:
  VPC:
    Description: Select an existing VPC
    Type: AWS::EC2::VPC::Id
    MinLength: '1'
  ExternalSubnets:
    Description: Select at least 2 external subnets in the VPC
    Type: List<AWS::EC2::Subnet::Id>
    MinLength: '1'
  InternalSubnets:
    Description: Select at least 2 internal subnets in the VPC
    Type: List<AWS::EC2::Subnet::Id>
    MinLength: '1'
  ControlGatewayOverPrivateOrPublicAddress:
    Description: Determines if the gateways are controlled using their private or public address
    Default: private
    Type: String
    AllowedValues:
    - private
    - public
  ELBPort:
    Description: The proxy port
    Default: '8080'
    Type: Number
  ELBType:
    Description: The type of the proxy
    Default: none
    AllowedValues:
    - none
    - internal
    - internet-facing
    Type: String
  ELBClients:
    Description: Allowed proxy clients
    Type: String
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  MinSize:
    Description: The minimal number of gateways in the Auto Scaling group
    Default: '2'
    Type: Number
    MinValue: '1'
  MaxSize:
    Description: The maximal number of gateways in the Auto Scaling group
    Default: '10'
    Type: Number
    MinValue: '1'
  ManagementServer:
    Description: The name of the management server as it appears in the configuration file
    Type: String
    MinLength: '1'
  ConfigruationTemplate:
    Description: A name of a template as it appears in the configuration file
    Type: String
    MinLength: '1'
  Name:
    Description: (optional) Name tag of gateways
    Type: String
    Default: ''
  SecurityGroups:
    Description: Select one or more security groups to be applied to the gateways
    Type: List<AWS::EC2::SecurityGroup::Id>
    ConstraintDescription: must be list of VPC security group ids
    MinLength: '1'
  InstanceType:
    Description: Gateway EC2 instance type
    Type: String
    Default: c4.xlarge
    AllowedValues:
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  AdminEmail:
    Description: Email address to notify if there are any scaling operations
    Type: String
    Default: ''
    AllowedPattern: (|([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?))
    ConstraintDescription: must be a valid email address.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  PasswordHash:
    Description: (optional) The admin user password hash (hint, use "openssl passwd -1")
    Default: ''
    Type: String
    AllowedPattern: '[\$\./a-zA-Z0-9]*'
  SICKey:
    Description: Secure Internal Communication (SIC) Activation key
    NoEcho: 'true'
    MinLength: '8'
    Type: String
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: At least 8 alpha numeric characters
  License:
    Description: The type of license
    Type: String
    AllowedValues:
    - BYOL
    - PAYG
  Shell:
    Description: The user admin shell
    Type: String
    Default: /etc/cli.sh
    AllowedValues:
    - /etc/cli.sh
    - /bin/bash
    - /bin/csh
    - /bin/tcsh
  EnableCloudWatch:
    Description: Report Check Point specific CloudWatch metrics
    Type: String
    AllowedValues:
    - true
    - false
    Default: true
Conditions:
  CreateNotification: !Not
  - !Equals
    - !Ref AdminEmail
    - ''
  CreateELB: !Not
  - !Equals
    - !Ref ELBType
    - none
  EnableCloudWatch: !Equals
  - !Ref EnableCloudWatch
  - true
Resources:
  CheckPointGateway:
    Type: AWS::IAM::Role
    Condition: EnableCloudWatch
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: CheckPointGateway
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EnableCloudWatch
    Properties:
      Path: /
      Roles:
      - !Ref CheckPointGateway
  AMI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: https://s3.amazonaws.com/CloudFormationTemplate/amis.json
      Parameters:
        Version: !Ref License
  NotificationTopic:
    Condition: CreateNotification
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref AdminEmail
        Protocol: email
  LifecycleTopic:
    Type: AWS::SNS::Topic
  PublisherRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: autoscaling.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-PublisherRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: !Ref LifecycleTopic
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-LambdaRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:PutRetentionPolicy
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-Function:*
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            - ec2:RebootInstances
            - ec2:CreateNetworkInterface
            - ec2:CreateTags
            - ec2:DeleteNetworkInterface
            - ec2:ModifyNetworkInterfaceAttribute
            - ec2:DescribeNetworkInterfaceAttribute
            - ec2:AttachNetworkInterface
            - autoscaling:DescribeTags
            - autoscaling:DeleteTags
            - autoscaling:CompleteLifecycleAction
            - autoscaling:UpdateAutoScalingGroup
            Resource: '*'
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Condition: CreateELB
    Properties:
      CrossZone: 'true'
      Listeners:
      - LoadBalancerPort: !Ref ELBPort
        InstancePort: !Ref ELBPort
        Protocol: TCP
      HealthCheck:
        Target: !Sub TCP:${ELBPort}
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '30'
        Timeout: '5'
      Scheme: !Ref ELBType
      Subnets: !Ref ExternalSubnets
      Policies:
      - PolicyName: EnableProxyProtocol
        PolicyType: ProxyProtocolPolicyType
        Attributes:
        - Name: ProxyProtocol
          Value: 'true'
        InstancePorts:
        - !Ref ELBPort
      SecurityGroups:
      - !Ref ELBSecurityGroup
  DescribeSubnetsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-DescribeSubnetsLambdaRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}-DescribeSubnets-Function:*
          - Effect: Allow
            Action:
            - ec2:DescribeSubnets
            Resource: '*'
  DescribeSubnetsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: null
      Description: Return the list of external subnets CIDRs
      FunctionName: !Sub ${AWS::StackName}-DescribeSubnets-Function
      Handler: index.handler
      Role: !GetAtt DescribeSubnetsLambdaRole.Arn
      Runtime: python2.7
      Timeout: 30
  SubnetCidrs:
    Type: Custom::SubnetCidrs
    Properties:
      ServiceToken: !GetAtt DescribeSubnetsFunction.Arn
      Subnets: !Ref ExternalSubnets
  GatewayGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref ExternalSubnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '0'
      MaxSize: !Ref MaxSize
      LoadBalancerNames:
      - !If
        - CreateELB
        - !Ref ElasticLoadBalancer
        - !Ref AWS::NoValue
      NotificationConfiguration: !If
      - CreateNotification
      - TopicARN: !Ref NotificationTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      - !Ref AWS::NoValue
      Tags:
      - Key: x-chkp-min-size
        Value: !Ref MinSize
        PropagateAtLaunch: 'false'
      - Key: Name
        Value: !Ref Name
        PropagateAtLaunch: 'true'
      - Key: x-chkp-tags
        Value: !Sub management=${ManagementServer}:template=${ConfigruationTemplate}:ip-address=${ControlGatewayOverPrivateOrPublicAddress}
        PropagateAtLaunch: 'true'
  LifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    DependsOn:
    - LambdaSubscription
    - LambdaPermission
    Properties:
      AutoScalingGroupName: !Ref GatewayGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: 120
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
      NotificationTargetARN: !Ref LifecycleTopic
      RoleARN: !GetAtt PublisherRole.Arn
      NotificationMetadata: !Join
      - ''
      - - '{"ExternalSubnets": ["'
        - !Join
          - '", "'
          - !Ref ExternalSubnets
        - '"], "InternalSubnets": ["'
        - !Join
          - '", "'
          - !Ref InternalSubnets
        - '"], "SecurityGroups": ["'
        - !Join
          - '", "'
          - !Ref SecurityGroups
        - '"], "Tags": [{"Key": "x-chkp-topology", "Value": "specific"}]}'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: null
      Description: Attach a second ENI to instances in an Auto Scaling Group
      FunctionName: !Sub ${AWS::StackName}-Function
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python2.7
      Timeout: 120
  LambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref LifecycleTopic
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref LifecycleTopic
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      KeyName: !Ref KeyName
      ImageId: !GetAtt AMI.Outputs.ImageId
      SecurityGroups: !Ref SecurityGroups
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !If
      - EnableCloudWatch
      - !Ref InstanceProfile
      - !Ref AWS::NoValue
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          external_subnets=( ${SubnetCidrs.Value} )
          pwd_hash=${PasswordHash}
          sic_key=${SICKey}
          shell=${Shell}
          enable_cloudwatch=${EnableCloudWatch}
          ifname=eth0
          mac="$(cat /sys/class/net/$ifname/address)"
          router="$(simpledhcp $ifname | cut -f 3)"
          for cidr in ${!external_subnets[@]} ; do
              clish -c "set static-route $cidr nexthop gateway address $router on" -s
          done
          ifname=eth1
          mac="$(cat /sys/class/net/$ifname/address)"
          cidr="$(curl_cli -s -S "169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/vpc-ipv4-cidr-block")"
          router="$(simpledhcp $ifname | cut -f 3)"
          clish -c "set static-route $cidr nexthop gateway address $router on" -s
          test -z "$pwd_hash" || {
              echo "set admin password"
              clish -c "set user admin password-hash $pwd_hash" -s
          }
          clish -c "set user admin shell $shell" -s
          config_system -s "install_security_gw=true&install_ppak=true&gateway_cluster_member=false&install_security_managment=false&ftw_sic_key=$sic_key"
          addr="$(ip addr show dev eth0 | awk "/inet/{print \$2; exit}" | cut -d / -f 1)"
          dynamic_objects -n LocalGateway -r "$addr" "$addr" -a
          if "$enable_cloudwatch" ; then
              cloudwatch start
          fi
          shutdown -r now
  SecurityGatewayScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref GatewayGroup
      Cooldown: '300'
      ScalingAdjustment: '1'
  SecurityGatewayScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref GatewayGroup
      Cooldown: '300'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '80'
      AlarmActions:
      - !Ref SecurityGatewayScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref GatewayGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 60% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '60'
      AlarmActions:
      - !Ref SecurityGatewayScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref GatewayGroup
      ComparisonOperator: LessThanThreshold
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Condition: CreateELB
    Properties:
      GroupDescription: ELB security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        CidrIp: !Ref ELBClients
        FromPort: !Ref ELBPort
        ToPort: !Ref ELBPort
Outputs:
  URL:
    Description: The URL of the Proxy
    Condition: CreateELB
    Value: !Sub http://${ElasticLoadBalancer.DNSName}
