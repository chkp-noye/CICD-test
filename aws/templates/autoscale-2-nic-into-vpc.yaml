AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy an Auto Scaling Group of CloudGuard Security Gateways with two network interfaces into an existing VPC (__VERSION__)
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: VPC Network Configuration
      Parameters:
      - VPC
      - ExternalSubnets
      - InternalSubnets
    - Label:
        default: EC2 Instances Configuration
      Parameters:
      - Name
      - InstanceType
      - KeyName
    - Label:
        default: Auto Scaling Configuration
      Parameters:
      - MinSize
      - MaxSize
      - AdminEmail
    - Label:
        default: Check Point Settings
      Parameters:
      - License
      - Shell
      - PasswordHash
      - SICKey
      - ASN
      - AllowUploadDownload
      - EnableCloudWatch
      - BootstrapScript
    - Label:
        default: Automatic Provisioning with Security Management Server Settings
      Parameters:
      - ControlGatewayOverPrivateOrPublicAddress
      - ManagementServer
      - ConfigurationTemplate
    ParameterLabels:
      VPC:
        default: VPC
      ExternalSubnets:
        default: External Subnets
      InternalSubnets:
        default: Internal Subnets
      AdminEmail:
        default: Email address
      MinSize:
        default: Minimum group size
      MaxSize:
        default: Maximum group size
      ControlGatewayOverPrivateOrPublicAddress:
        default: Gateways addresses
      ManagementServer:
        default: Management Server
      ConfigurationTemplate:
        default: Configuration template
      Name:
        default: Name
      InstanceType:
        default: Instance type
      KeyName:
        default: Key name
      SICKey:
        default: SIC key
      ASN:
        default: BGP ASN
      License:
        default: Version & license
      Shell:
        default: Admin shell
      PasswordHash:
        default: Password hash
      AllowUploadDownload:
        default: Allow upload & download
      EnableCloudWatch:
        default: CloudWatch metrics
      BootstrapScript:
        default: Bootstrap Script
Parameters:
  VPC:
    Description: Select an existing VPC
    Type: AWS::EC2::VPC::Id
    MinLength: '1'
  ExternalSubnets:
    Description: Select at least 2 external subnets in the VPC
    Type: List<AWS::EC2::Subnet::Id>
    MinLength: '1'
  InternalSubnets:
    Description: Select an internal subnet for each external subnet, in the same Availability Zone, in the same order
    Type: List<AWS::EC2::Subnet::Id>
    MinLength: '1'
  ControlGatewayOverPrivateOrPublicAddress:
    Description: Determines if the gateways are provisioned using their private or public address
    Default: private
    Type: String
    AllowedValues:
    - private
    - public
  MinSize:
    Description: The minimal number of gateways in the Auto Scaling group
    Default: '2'
    Type: Number
    MinValue: '1'
  MaxSize:
    Description: The maximal number of gateways in the Auto Scaling group
    Default: '10'
    Type: Number
    MinValue: '1'
  ManagementServer:
    Description: The name that represents the Security Management Server in the automatic provisioning configuration
    Type: String
    Default: management-server
    MinLength: '1'
  ConfigurationTemplate:
    Description: A name of a gateway configuration template in the automatic provisioning configuration
    Type: String
    Default: configuration-template
    MinLength: '1'
  Name:
    Description: (optional)
    Type: String
    Default: Check-Point-Gateway
  InstanceType:
    Description: c4 and t2 instance types are supported only up to version R80.10 and c5 are supported only with R80.20
    Type: String
    Default: c5.xlarge
    AllowedValues:
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - c5.large
    - c5.xlarge
    - c5.2xlarge
    - c5.4xlarge
    - c5.9xlarge
    - c5.18xlarge
    - t2.xlarge
    - t2.2xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  AdminEmail:
    Description: Notifications about scaling events will be sent to this email address (optional)
    Type: String
    Default: ''
    AllowedPattern: (|([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?))
    ConstraintDescription: must be a valid email address.
  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    MinLength: 1
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  PasswordHash:
    Description: Admin user's password hash (use command \"openssl passwd -1 PASSWORD\" to get the PASSWORD's hash) (optional)
    Type: String
    Default: ''
    AllowedPattern: '[\$\./a-zA-Z0-9]*'
    NoEcho: true
  AllowUploadDownload:
    Description: Automatically download Blade Contracts and other important data. Improve product experience by sending data to Check Point
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
  SICKey:
    Description: The Secure Internal Communication key creates trusted connections between Check Point components. Choose a random string consisting of at least 8 alphanumeric characters
    NoEcho: 'true'
    MinLength: '8'
    Type: String
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: At least 8 alpha numeric characters
  ASN:
    Description: The organization Autonomous System Number (ASN) that identifies the routing domain for the Security Gateways
    Type: String
    AllowedPattern: '[0-9]*'
    Default: 65000
  License:
    Type: String
    Default: R80.20-PAYG-NGTX
    AllowedValues:
    - R80.10-BYOL
    - R80.10-PAYG-NGTP
    - R80.10-PAYG-NGTX
    - R80.20-BYOL
    - R80.20-PAYG-NGTP
    - R80.20-PAYG-NGTX
  Shell:
    Description: Change the admin shell to enable advanced command line configuration
    Type: String
    Default: /etc/cli.sh
    AllowedValues:
    - /etc/cli.sh
    - /bin/bash
    - /bin/csh
    - /bin/tcsh
  EnableCloudWatch:
    Description: Report Check Point specific CloudWatch metrics
    Type: String
    AllowedValues:
    - true
    - false
    Default: false
  BootstrapScript:
    Description: An optional script with comma separated commands to run on the initial boot
    Type: CommaDelimitedList
    Default: ''
    NoEcho: true
Conditions:
  AdminEmail: !Not
  - !Equals
    - !Ref AdminEmail
    - ''
  EnableCloudWatch: !Equals
  - !Ref EnableCloudWatch
  - true
Resources:
  SecurityGroups:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permissive Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: -1
        CidrIp: 0.0.0.0/0
  CheckPointGatewayRole:
    Type: AWS::IAM::Role
    Condition: EnableCloudWatch
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-CheckPointGatewayRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - cloudwatch:PutMetricData
            Resource: '*'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Condition: EnableCloudWatch
    Properties:
      Path: /
      Roles:
      - !Ref CheckPointGatewayRole
  AMI:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: __URL__/amis.json
      Parameters:
        Version: !Join
        - '-'
        - - !Ref License
          - GW
  NotificationTopic:
    Condition: AdminEmail
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref AdminEmail
        Protocol: email
  LifecycleTopic:
    Type: AWS::SNS::Topic
  LifecycleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: autoscaling.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-LifecycleRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - sns:Publish
            Resource: !Ref LifecycleTopic
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-LambdaRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:PutRetentionPolicy
            Resource: !Sub
            - arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/Function-${unique_id}:*
            - unique_id: !Select
              - 2
              - !Split
                - '/'
                - !Ref ${AWS::StackId}
          - Effect: Allow
            Action:
            - ec2:DescribeInstances
            - ec2:RebootInstances
            - ec2:CreateNetworkInterface
            - ec2:CreateTags
            - ec2:DeleteNetworkInterface
            - ec2:ModifyNetworkInterfaceAttribute
            - ec2:DescribeNetworkInterfaceAttribute
            - ec2:AttachNetworkInterface
            - autoscaling:DescribeTags
            - autoscaling:DeleteTags
            - autoscaling:CompleteLifecycleAction
            - autoscaling:UpdateAutoScalingGroup
            Resource: '*'
  DescribeSubnetsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${AWS::StackName}-DescribeSubnetsLambdaRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub
            - arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DescribeSubnets-Function-${unique_id}:*
            - unique_id: !Select
              - 2
              - !Split
                - '/'
                - !Ref ${AWS::StackId}
          - Effect: Allow
            Action:
            - ec2:DescribeSubnets
            Resource: '*'
  DescribeSubnetsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          from __future__ import print_function

          import json
          import traceback

          import botocore.vendored.requests as requests
          import boto3

          ec2 = boto3.client('ec2')

          SUCCESS = 'SUCCESS'
          FAILED = 'FAILED'


          def send_response(event, context, status, data=None, reason=None):
              response = {
                  'Status': status,
                  'LogicalResourceId': event['LogicalResourceId'],
                  'RequestId': event['RequestId'],
                  'StackId': event['StackId'],
              }
              if reason:
                  response['Reason'] = reason
              else:
                  response['Reason'] = 'N/A'
              if data:
                  response['Data'] = data
              if status == SUCCESS:
                  response['PhysicalResourceId'] = event.get(
                      'PhysicalResourceId', '%s-%s' % (
                          context.function_name, event['LogicalResourceId']))
              print('Response:\n' + json.dumps(response, indent=2))
              r = requests.put(event['ResponseURL'], json.dumps(response))
              print(r.text)
              print(r.status_code)


          def handler(event, context):
              try:
                  print("Received event: " + json.dumps(event, indent=2))
                  if event['RequestType'] == 'Delete':
                      send_response(event, context, SUCCESS)
                      return
                  subnet_cidrs = []
                  for subnet in ec2.describe_subnets(
                          SubnetIds=event['ResourceProperties']['Subnets'])['Subnets']:
                      subnet_cidrs.append(subnet['CidrBlock'])
                  send_response(event, context, SUCCESS, data={
                      'Value': ' '.join(subnet_cidrs)
                  })
              except:
                  print(traceback.format_exc())
                  send_response(event, context, FAILED, reason=traceback.format_exc())
      Description: Return the list of external subnets CIDRs
      FunctionName: !Sub
      - DescribeSubnets-Function-${unique_id}
      - unique_id: !Select
        - 2
        - !Split
          - '/'
          - !Ref ${AWS::StackId}
      Handler: index.handler
      Role: !GetAtt DescribeSubnetsLambdaRole.Arn
      Runtime: python3.6
      Timeout: 30
  SubnetCidrs:
    Type: Custom::SubnetCidrs
    Properties:
      ServiceToken: !GetAtt DescribeSubnetsFunction.Arn
      Subnets: !Ref ExternalSubnets
  GatewayGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref ExternalSubnets
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '0'
      MaxSize: !Ref MaxSize
      NotificationConfiguration: !If
      - AdminEmail
      - TopicARN: !Ref NotificationTopic
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
      - !Ref AWS::NoValue
      Tags:
      - Key: x-chkp-min-size
        Value: !Ref MinSize
        PropagateAtLaunch: 'false'
      - Key: Name
        Value: !Ref Name
        PropagateAtLaunch: 'true'
      - Key: x-chkp-tags
        Value: !Sub management=${ManagementServer}:template=${ConfigurationTemplate}:ip-address=${ControlGatewayOverPrivateOrPublicAddress}
        PropagateAtLaunch: 'true'
  LifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    DependsOn:
    - LambdaSubscription
    - LambdaPermission
    Properties:
      AutoScalingGroupName: !Ref GatewayGroup
      DefaultResult: ABANDON
      HeartbeatTimeout: 120
      LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
      NotificationTargetARN: !Ref LifecycleTopic
      RoleARN: !GetAtt LifecycleRole.Arn
      NotificationMetadata: !Join
      - ''
      - - '{"ExternalSubnets": ["'
        - !Join
          - '", "'
          - !Ref ExternalSubnets
        - '"], "InternalSubnets": ["'
        - !Join
          - '", "'
          - !Ref InternalSubnets
        - '"], "SecurityGroups": ["'
        - !Ref SecurityGroups
        - '"], "Tags": [{"Key": "x-chkp-topology", "Value": "specific"}]}'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          from __future__ import print_function

          import json
          import time
          import traceback

          import boto3

          ec2 = boto3.client('ec2')
          autoscaling = boto3.client('autoscaling')
          logs = boto3.client('logs')


          def handler(event, context):
              print("Received event: " + json.dumps(event, indent=2))
              message = json.loads(event['Records'][0]['Sns']['Message'])
              if message.get('Event') == 'autoscaling:TEST_NOTIFICATION':
                  try:
                      logs.put_retention_policy(
                          logGroupName=context.log_group_name,
                          retentionInDays=1
                      )
                      tags = autoscaling.describe_tags(
                          Filters=[
                              {
                                  'Name': 'auto-scaling-group',
                                  'Values': [message['AutoScalingGroupName']]
                              },
                              {
                                  'Name': 'key',
                                  'Values': ['x-chkp-min-size']
                              }
                          ])['Tags']
                      if tags:
                          tag = tags[0]
                          print('Setting MinSize to ' + tag['Value'])
                          autoscaling.update_auto_scaling_group(
                              AutoScalingGroupName=message['AutoScalingGroupName'],
                              MinSize=int(tag['Value']),
                              DesiredCapacity=int(tag['Value'])
                          )
                          autoscaling.delete_tags(Tags=[tag])
                  except:
                      print(traceback.format_exc())
                  return
              metadata = message.get('NotificationMetadata')
              if not metadata:
                  return
              print('Metadata is: ' + metadata)
              metadata = json.loads(metadata)
              instanceId = message['EC2InstanceId']
              externalSubnets = metadata['ExternalSubnets']
              internalSubnets = metadata['InternalSubnets']
              securityGroups = metadata['SecurityGroups']
              tags = metadata['Tags']
              eni_id = None
              result = 'ABANDON'
              try:
                  externalSubnetId = ec2.describe_instances(InstanceIds=[instanceId])[
                      'Reservations'][0]['Instances'][0]['SubnetId']
                  internalSubnetId = internalSubnets[
                      externalSubnets.index(externalSubnetId)]
                  eni = ec2.create_network_interface(
                      SubnetId=internalSubnetId,
                      Groups=securityGroups)['NetworkInterface']
                  eni_id = eni['NetworkInterfaceId']
                  ec2.create_tags(Resources=[eni_id], Tags=tags)
                  ec2.attach_network_interface(
                      NetworkInterfaceId=eni_id,
                      InstanceId=instanceId,
                      DeviceIndex=1)
                  while True:
                      attachment = ec2.describe_network_interface_attribute(
                          NetworkInterfaceId=eni_id,
                          Attribute='attachment'
                      )
                      if attachment['Attachment']['Status'] != 'attaching':
                          break
                      time.sleep(1)
                  if attachment['Attachment']['Status'] != 'attached':
                      raise Exception(
                          'Failed to attach %s: %s' % (
                              eni_id, attachment['Attachment']['Status']))
                  ec2.modify_network_interface_attribute(
                      NetworkInterfaceId=eni_id,
                      Attachment={
                          'AttachmentId': attachment['Attachment']['AttachmentId'],
                          'DeleteOnTermination': True
                      }
                  )
                  eni_id = None
                  ec2.reboot_instances(InstanceIds=[instanceId])
                  result = 'CONTINUE'
              except:
                  print(traceback.format_exc())
                  if eni_id:
                      try:
                          print('Deleting ' + eni_id)
                          ec2.delete_network_interface(NetworkInterfaceId=eni_id)
                      except:
                          print(traceback.format_exc())
              finally:
                  autoscaling.complete_lifecycle_action(
                      LifecycleHookName=message['LifecycleHookName'],
                      AutoScalingGroupName=message['AutoScalingGroupName'],
                      LifecycleActionToken=message['LifecycleActionToken'],
                      LifecycleActionResult=result,
                      InstanceId=instanceId
                  )
      Description: Attach a second ENI to instances in an Auto Scaling Group
      FunctionName: !Sub
      - Function-${unique_id}
      - unique_id: !Select
        - 2
        - !Split
          - '/'
          - !Ref ${AWS::StackId}
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.6
      Timeout: 120
  LambdaSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LambdaFunction.Arn
      Protocol: lambda
      TopicArn: !Ref LifecycleTopic
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref LifecycleTopic
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: 'true'
      KeyName: !Ref KeyName
      ImageId: !GetAtt AMI.Outputs.ImageId
      SecurityGroups:
      - !Ref SecurityGroups
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !If
      - EnableCloudWatch
      - !Ref InstanceProfile
      - !Ref AWS::NoValue
      UserData:
        Fn::Base64: !Sub
        - |
          #!/bin/bash
          echo template_name: autoscale-2-nic >> /etc/cloud-version
          echo template_version: __VERSION__ >> /etc/cloud-version
          clish -c "set user admin shell ${Shell}" -s
          external_subnets=( ${SubnetCidrs.Value} )
          enable_cloudwatch=${EnableCloudWatch}
          ifname=eth0
          mac="$(cat /sys/class/net/$ifname/address)"
          dhcp_opts=()
          uname -r | grep -qs '^2\.6\.18' || dhcp_opts+=(-o)
          router="$(simpledhcp "${!dhcp_opts[@]}" $ifname | cut -f 3)"
          for cidr in ${!external_subnets[@]} ; do
              clish -c "set static-route $cidr nexthop gateway address $router on" -s
          done
          ifname=eth1
          mac="$(cat /sys/class/net/$ifname/address)"
          cidr="$(curl_cli -s -S "169.254.169.254/latest/meta-data/network/interfaces/macs/$mac/vpc-ipv4-cidr-block")"
          dhcp_opts=()
          uname -r | grep -qs '^2\.6\.18' || dhcp_opts+=(-o)
          router="$(simpledhcp "${!dhcp_opts[@]}" $ifname | cut -f 3)"
          clish -c "set static-route $cidr nexthop gateway address $router on" -s
          pwd_hash='${PasswordHash}'
          test -z "$pwd_hash" && {
              pwd_hash="$(dd if=/dev/urandom count=1 2>/dev/null | sha1sum | cut -c -28)"
          }
          sic=$(echo ${sic64} | base64 --decode)
          blink_config -s "gateway_cluster_member=false&ftw_sic_key='$sic'&upload_info=${AllowUploadDownload}&download_info=${AllowUploadDownload}&admin_hash='$pwd_hash'"
          if "$enable_cloudwatch" ; then
              cloudwatch start
          fi
          clish -c "set as ${ASN}" -s
          bootstrap=$(echo '"${bootstrap64}"' | base64 --decode)
          eval $bootstrap
        - sic64: !Base64
            Ref: SICKey
          bootstrap64: !Base64
            Fn::Join:
            - '; '
            - Ref: BootstrapScript
  SecurityGatewayScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref GatewayGroup
      Cooldown: '300'
      ScalingAdjustment: '1'
  SecurityGatewayScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref GatewayGroup
      Cooldown: '300'
      ScalingAdjustment: '-1'
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 80% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '80'
      AlarmActions:
      - !Ref SecurityGatewayScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref GatewayGroup
      ComparisonOperator: GreaterThanThreshold
  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 60% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '60'
      AlarmActions:
      - !Ref SecurityGatewayScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref GatewayGroup
      ComparisonOperator: LessThanThreshold
